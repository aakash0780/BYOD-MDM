# MicroMDM/NanoMDM Docker Compose Environment Configuration
# Copy this file to .env and modify the values according to your setup

# =============================================================================
# REQUIRED CONFIGURATION
# =============================================================================

# Domain name for your MDM server
# This should be a fully qualified domain name (FQDN) that points to your server
DOMAIN_NAME=your-mdm-domain.com

# Administrator email address
# Used for SSL certificate generation
ADMIN_EMAIL=admin@your-company.com

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL database settings
POSTGRES_DB=micromdm
POSTGRES_USER=micromdm
POSTGRES_PASSWORD=YourStrongDatabasePassword123!

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# HTTP port for the MDM server
HTTP_PORT=8080

# SCEP server port
SCEP_PORT=8082

# Debug mode (true/false)
DEBUG_MODE=false

# Log level (debug, info, warn, error)
LOG_LEVEL=info

# =============================================================================
# APPLE PUSH NOTIFICATION SERVICE (APNs) CONFIGURATION
# =============================================================================

# APNs topic - usually com.apple.mgmt.External for third-party MDM
APNS_TOPIC=com.apple.mgmt.External

# Note: You need to obtain APNs certificates from Apple Developer Portal
# Place the following files in the ./certs directory:
# - apns.pem (APNs certificate)
# - apns-key.pem (APNs private key)

# =============================================================================
# WEBHOOK CONFIGURATION (OPTIONAL)
# =============================================================================

# Webhook URL for receiving MDM events
# Leave empty if not using webhooks
WEBHOOK_URL=

# =============================================================================
# DOCKER COMPOSE PROFILES
# =============================================================================

# To run with NanoMDM (default):
# docker-compose up -d

# To run with MicroMDM instead:
# docker-compose --profile micromdm up -d

# To enable SSL with Certbot:
# docker-compose --profile ssl up -d

# =============================================================================
# CERTIFICATE REQUIREMENTS
# =============================================================================

# Before starting the services, you need to prepare the following certificates
# in the ./certs directory:

# 1. APNs Certificates (from Apple Developer Portal):
#    - apns.pem (APNs certificate in PEM format)
#    - apns-key.pem (APNs private key in PEM format)

# 2. Push Certificates (for device communication):
#    - push.pem (Push certificate)
#    - push-key.pem (Push private key)

# 3. Server TLS Certificates:
#    - server.pem (Server certificate)
#    - server-key.pem (Server private key)

# 4. CA Certificates (for SCEP):
#    - ca.pem (Certificate Authority certificate)
#    - ca-key.pem (Certificate Authority private key)

# =============================================================================
# APPLE DEVELOPER REQUIREMENTS
# =============================================================================

# To use this MDM solution, you need:

# 1. Apple Developer Account ($99/year)
# 2. MDM Vendor Certificate from Apple
# 3. APNs Certificate for MDM
# 4. Push Certificate for device communication

# Steps to obtain certificates:
# 1. Create a Certificate Signing Request (CSR)
# 2. Submit CSR to Apple Developer Portal
# 3. Download the certificates
# 4. Convert to PEM format if necessary

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. Keep all certificate files secure and never commit them to version control
# 2. Use strong passwords for database access
# 3. Regularly rotate certificates before expiration
# 4. Monitor certificate expiration dates
# 5. Implement proper firewall rules
# 6. Use HTTPS for all communications

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================

# Ensure the following ports are accessible:
# - 80 (HTTP) - for certificate validation and redirect to HTTPS
# - 443 (HTTPS) - for secure MDM communication
# - 8080 (MDM Server) - if not using reverse proxy
# - 8082 (SCEP Server) - for certificate enrollment

# =============================================================================
# BACKUP RECOMMENDATIONS
# =============================================================================

# Regularly backup the following:
# - postgres_data (database volume)
# - ./certs directory (all certificates)
# - nanomdm_config or micromdm_config (configuration volumes)
# - scep_depot (issued certificates)

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common issues and solutions:

# 1. APNs connection issues:
#    - Verify APNs certificates are valid and not expired
#    - Check network connectivity to Apple's APNs servers
#    - Ensure correct APNs topic is configured

# 2. Device enrollment issues:
#    - Verify server certificates are trusted by devices
#    - Check SCEP server is accessible
#    - Ensure proper DNS resolution for domain name

# 3. Database connection issues:
#    - Verify PostgreSQL is running and accessible
#    - Check database credentials
#    - Review database logs for errors

# To view logs:
# docker-compose logs nanomdm
# docker-compose logs postgres
# docker-compose logs scep

